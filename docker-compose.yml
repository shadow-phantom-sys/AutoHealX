version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: autohealx-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: autohealx
      MYSQL_USER: autohealx
      MYSQL_PASSWORD: autohealx123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - autohealx-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: autohealx-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - autohealx-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      retries: 5
      interval: 10s

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: autohealx-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - autohealx-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: autohealx-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - autohealx-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      timeout: 10s
      retries: 5
      interval: 30s

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: autohealx-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - autohealx-network

  # Grafana for observability dashboards
  grafana:
    image: grafana/grafana:10.0.0
    container_name: autohealx-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: 'false'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - autohealx-network
    depends_on:
      - prometheus

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: autohealx-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - autohealx-network

  # Tempo for distributed tracing
  tempo:
    image: grafana/tempo:2.2.0
    container_name: autohealx-tempo
    ports:
      - "3200:3200"   # Tempo HTTP
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
    volumes:
      - ./monitoring/tempo.yml:/etc/tempo/tempo.yml:ro
      - tempo_data:/tmp/tempo
    command: -config.file=/etc/tempo/tempo.yml
    networks:
      - autohealx-network

  # OTEL Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.88.0
    container_name: autohealx-otel-collector
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
    volumes:
      - ./monitoring/otel-collector.yml:/etc/otel-collector-config.yml:ro
    command: ["--config=/etc/otel-collector-config.yml"]
    networks:
      - autohealx-network
    depends_on:
      - tempo
      - prometheus

  # Product Service
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: autohealx-product-service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/autohealx?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATA_REDIS_HOST: redis
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: product-service
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - autohealx-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s

  # Cart Service (placeholder for future implementation)
  # cart-service:
  #   build:
  #     context: ./cart-service
  #     dockerfile: Dockerfile
  #   container_name: autohealx-cart-service
  #   ports:
  #     - "8082:8082"
  #   environment:
  #     SPRING_PROFILES_ACTIVE: dev
  #   depends_on:
  #     mysql:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - autohealx-network

  # Order Service (placeholder for future implementation)
  # order-service:
  #   build:
  #     context: ./order-service
  #     dockerfile: Dockerfile
  #   container_name: autohealx-order-service
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     SPRING_PROFILES_ACTIVE: dev
  #   depends_on:
  #     mysql:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - autohealx-network

  # Payment Service (placeholder for future implementation)
  # payment-service:
  #   build:
  #     context: ./payment-service
  #     dockerfile: Dockerfile
  #   container_name: autohealx-payment-service
  #   ports:
  #     - "8084:8084"
  #   environment:
  #     SPRING_PROFILES_ACTIVE: dev
  #   depends_on:
  #     mysql:
  #       condition: service_healthy
  #   networks:
  #     - autohealx-network

  # Inventory Worker (placeholder for future implementation)
  # inventory-worker:
  #   build:
  #     context: ./inventory-worker
  #     dockerfile: Dockerfile
  #   container_name: autohealx-inventory-worker
  #   environment:
  #     SPRING_PROFILES_ACTIVE: dev
  #   depends_on:
  #     mysql:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - autohealx-network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: autohealx-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - product-service
    networks:
      - autohealx-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  tempo_data:
    driver: local

networks:
  autohealx-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16